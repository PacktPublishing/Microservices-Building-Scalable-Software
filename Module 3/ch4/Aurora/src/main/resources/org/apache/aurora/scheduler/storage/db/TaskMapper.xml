<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.aurora.scheduler.storage.db.TaskMapper">
  <cache type="org.apache.aurora.scheduler.storage.db.MyBatisCacheImpl">
    <property name="size" value="10000"/>
  </cache>
  <insert id="insertScheduledTask" useGeneratedKeys="true" keyColumn="id" keyProperty="result.id">
    INSERT INTO tasks (
      task_id,
      slave_row_id,
      instance_id,
      status,
      failure_count,
      ancestor_task_id,
      task_config_row_id,
    ) VALUES (
      #{task.assignedTask.taskId},
      (
        SELECT ID
        FROM host_attributes
        WHERE slave_id = #{task.assignedTask.slaveId}
          AND host = #{task.assignedTask.slaveHost}
      ),
      #{task.assignedTask.instanceId},
      #{task.status, typeHandler=org.apache.aurora.scheduler.storage.db.typehandlers.ScheduleStatusTypeHandler},
      #{task.failureCount},
      #{task.ancestorId},
      #{configId}
    )
  </insert>

  <resultMap id="taskEventMap" type="org.apache.aurora.gen.TaskEvent">
    <id column="id"/>
    <result property="status"
            column="status"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.ScheduleStatusTypeHandler" />
    <result column="timestamp_ms" property="timestamp" />
    <result column="message" property="message" />
    <result column="scheduler_host" property="scheduler" />
  </resultMap>

  <resultMap id="scheduledTaskMap" type="org.apache.aurora.scheduler.storage.db.views.DbScheduledTask">
    <id column="row_id"/>
    <result property="status"
            column="status"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.ScheduleStatusTypeHandler" />
    <result column="task_id" property="assignedTask.taskId"/>
    <result column="slave_id" property="assignedTask.slaveId"/>
    <result column="slave_host" property="assignedTask.slaveHost"/>
    <result column="instance_id" property="assignedTask.instanceId"/>
    <association
        property="assignedTask.task"
        select="org.apache.aurora.scheduler.storage.db.TaskConfigMapper.selectConfig"
        column="task_config_row_id"
        foreignColumn="row_id"/>
    <collection
        property="assignedTask.assignedPorts"
        resultMap="portMap"
        columnPrefix="tp_"/>
    <collection
        property="taskEvents"
        resultMap="taskEventMap"
        columnPrefix="te_"
        notNullColumn="status"/>
  </resultMap>

  <sql id="unscopedSelect">
    SELECT
      t.id AS row_id,
      t.task_config_row_id AS task_config_row_id,
      t.task_id AS task_id,
      t.instance_id AS instance_id,
      t.status AS status,
      t.failure_count AS failure_count,
      t.ancestor_task_id AS ancestor_id,
      j.role AS c_j_role,
      j.environment AS c_j_environment,
      j.name AS c_j_name,
      h.slave_id AS slave_id,
      h.host AS slave_host,
      tp.name as tp_name,
      tp.port as tp_port,
      te.timestamp_ms as te_timestamp,
      te.status as te_status,
      te.message as te_message,
      te.scheduler_host as te_scheduler
    FROM tasks AS t
    INNER JOIN task_configs as c ON c.id = t.task_config_row_id
    INNER JOIN job_keys AS j ON j.id = c.job_key_id
    LEFT OUTER JOIN task_ports as tp ON tp.task_row_id = t.id
    LEFT OUTER JOIN task_events as te ON te.task_row_id = t.id
    LEFT OUTER JOIN host_attributes AS h ON h.id = t.slave_row_id
  </sql>

  <select id="selectById" resultMap="scheduledTaskMap">
    <include refid="unscopedSelect"/>
    WHERE
      t.task_id = #{taskId}
  </select>

  <select id="select" resultMap="scheduledTaskMap">
    <include refid="unscopedSelect"/>
    <where>
      <if test="role != null">
        j.role = #{role}
      </if>
      <if test="environment != null">
        AND j.environment = #{environment}
      </if>
      <if test="jobName != null">
        AND j.name = #{jobName}
      </if>
      <if test="!taskIds.isEmpty()">
        AND t.task_id IN (
        <foreach item="task_id" collection="taskIds" separator=",">
          #{task_id}
        </foreach>
        )
      </if>
      <if test="!statuses.isEmpty()">
        AND t.status IN (
        <foreach item="element" collection="statuses" separator=",">
          #{element, typeHandler=org.apache.aurora.scheduler.storage.db.typehandlers.ScheduleStatusTypeHandler}
        </foreach>
        )
      </if>
      <if test="!instanceIds.isEmpty()">
        AND t.instance_id IN (
        <foreach item="instance_id" collection="instanceIds" separator=",">
          #{instance_id}
        </foreach>
        )
      </if>
      <if test="!slaveHosts.isEmpty()">
        AND h.host IN (
        <foreach item="host" collection="slaveHosts" separator=",">
          #{host}
        </foreach>
        )
      </if>
      <if test="!jobKeys.isEmpty()">
        AND (
        <foreach item="jobKey" collection="jobKeys" open="(" separator=") OR (" close=")">
          j.role = #{jobKey.role}
          AND j.name = #{jobKey.name}
          AND j.environment = #{jobKey.environment}
        </foreach>
        )
      </if>
    </where>
  </select>

  <select id="selectJobKeys" resultMap="org.apache.aurora.scheduler.storage.db.JobKeyMapper.jobKeyMap">
    SELECT DISTINCT
      j.role AS role,
      j.environment AS environment,
      j.name AS name
    FROM tasks AS t
    INNER JOIN task_configs as c ON c.id = t.task_config_row_id
    INNER JOIN job_keys AS j ON j.id = c.job_key_id
  </select>

  <insert id="insertTaskEvents">
    INSERT INTO task_events(
      task_row_id,
      timestamp_ms,
      status,
      message,
      scheduler_host
    ) VALUES (
    <foreach item="event" collection="events" separator="),(">
      #{taskRowId},
      #{event.timestamp},
      #{event.status, typeHandler=org.apache.aurora.scheduler.storage.db.typehandlers.ScheduleStatusTypeHandler},
      #{event.message},
      #{event.scheduler}
    </foreach>
    )
  </insert>

  <insert id="insertPorts">
    INSERT INTO task_ports(
      task_row_id,
      name,
      port
    ) VALUES (
    <foreach item="port" collection="ports" separator="),(">
      #{taskRowId},
      #{port.first},
      #{port.second}
    </foreach>
    )
  </insert>

  <resultMap id="portMap" type="org.apache.aurora.scheduler.storage.db.views.DbAssginedPort">
    <id column="id"/>
    <result column="name" property="name" />
    <result column="port" property="port" />
  </resultMap>

  <delete id="truncate">
    <!--
    This assumes cascading deletes will clean up all references.  Also, once the job store is
    migrated, there will be a clash between deletes on the two that needs to be resolved.  At that
    point it probably makes sense to remove all of the store-specific truncate verbs and use a
    single control.
     -->
    DELETE FROM tasks
  </delete>

  <delete id="deleteTasks">
    DELETE FROM tasks WHERE task_id IN (
    <foreach item="task_id" collection="taskIds" separator=",">
      #{task_id}
    </foreach>
    )
  </delete>
</mapper>

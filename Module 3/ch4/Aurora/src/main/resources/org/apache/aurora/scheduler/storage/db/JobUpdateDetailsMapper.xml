<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.aurora.scheduler.storage.db.JobUpdateDetailsMapper">
  <sql id="job_key_inner_join">
    INNER JOIN job_keys AS j ON j.id = u.job_key_id
  </sql>

  <sql id="filter_by_update_key">
    u.update_id = #{key.id}
    AND j.role = #{key.job.role}
    AND j.environment = #{key.job.environment}
    AND j.name = #{key.job.name}
  </sql>

  <sql id="select_update_row_id">
      (
        SELECT u.id
        FROM job_updates AS u
        <!-- Full qualification is needed since this fragment is accessed from outside of this
             mapper.  Without full qualification, mybatis looks for job_key_inner_join in the
             caller's namespace.  It's unclear if this is a feature or bug in mybatis.
         -->
        <include refid="org.apache.aurora.scheduler.storage.db.JobUpdateDetailsMapper.job_key_inner_join"/>
        WHERE <include refid="org.apache.aurora.scheduler.storage.db.JobUpdateDetailsMapper.filter_by_update_key"/>
      )
  </sql>

  <insert id="insert">
    INSERT INTO job_updates (
      job_key_id,
      update_id,
      user,
      update_group_size,
      max_per_instance_failures,
      max_failed_instances,
      min_wait_in_instance_running_ms,
      rollback_on_failure,
      wait_for_batch_completion,
      block_if_no_pulses_after_ms
    ) VALUES (
      (
        SELECT ID
        FROM job_keys
        WHERE role = #{summary.key.job.role}
          AND environment = #{summary.key.job.environment}
          AND name = #{summary.key.job.name}
      ),
      #{summary.key.id},
      #{summary.user},
      #{instructions.settings.updateGroupSize},
      #{instructions.settings.maxPerInstanceFailures},
      #{instructions.settings.maxFailedInstances},
      #{instructions.settings.minWaitInInstanceRunningMs},
      #{instructions.settings.rollbackOnFailure},
      #{instructions.settings.waitForBatchCompletion},
      #{instructions.settings.blockIfNoPulsesAfterMs},
    )
  </insert>

  <insert id="insertLockToken">
    INSERT INTO job_update_locks (
      update_row_id,
      lock_token
    ) VALUES (
      <include refid="select_update_row_id"/>,
      #{lockToken}
    )
  </insert>

  <insert id="insertTaskConfig" useGeneratedKeys="true" keyColumn="id" keyProperty="result.id">
    INSERT INTO job_update_configs (
      update_row_id,
      task_config_row_id,
      is_new
    ) VALUES (
      <include refid="select_update_row_id"/>,
      #{taskConfigRow},
      #{isNew}
    )
  </insert>

  <sql id="insert_instance_ranges">
    <foreach item="element" collection="ranges" open="(" separator="),(" close=")">
      <include refid="select_update_row_id"/>,
      #{element.first},
      #{element.last}
    </foreach>
  </sql>

  <insert id="insertTaskConfigInstances">
    INSERT INTO job_update_configs_to_instances (
      config_id,
      first,
      last
    ) VALUES
    <foreach item="element" collection="ranges" open="(" separator="),(" close=")">
      #{configId},
      #{element.first},
      #{element.last}
    </foreach>
  </insert>

  <insert id="insertInstanceOverrides">
    INSERT INTO job_updates_to_instance_overrides (
      update_row_id,
      first,
      last
    ) VALUES
  <include refid="insert_instance_ranges" />
  </insert>

  <insert id="insertDesiredInstances">
    INSERT INTO job_updates_to_desired_instances (
      update_row_id,
      first,
      last
    ) VALUES
    <include refid="insert_instance_ranges" />
  </insert>

  <resultMap id="jobUpdateStateMap" type="org.apache.aurora.gen.JobUpdateState">
    <id column="update_id" />
    <result property="status"
            column="status"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateStatusTypeHandler" />
  </resultMap>

  <resultMap id="jobUpdateSummaryMap" type="org.apache.aurora.gen.JobUpdateSummary">
    <id column="update_id" property="key.id" javaType="String" />
    <association property="key.job"
                 resultMap="org.apache.aurora.scheduler.storage.db.JobKeyMapper.jobKeyMap"
                 columnPrefix="jk_"/>
    <association property="state"
                 resultMap="jobUpdateStateMap"
                 columnPrefix="just_" />
  </resultMap>

  <resultMap id="rangeMap" type="org.apache.aurora.gen.Range">
    <id column="id" />
  </resultMap>

  <resultMap
      id="instanceConfigMap"
      type="org.apache.aurora.scheduler.storage.db.views.DbInstanceTaskConfig">
    <id column="id" />
    <association
        property="task"
        select="org.apache.aurora.scheduler.storage.db.TaskConfigMapper.selectConfig"
        column="task_config_row_id"
        foreignColumn="row_id"/>
    <collection property="instances" resultMap="rangeMap" columnPrefix="r_" notNullColumn="id" />
  </resultMap>

  <resultMap id="jobUpdateSettingsMap" type="org.apache.aurora.gen.JobUpdateSettings">
    <id column="id" />
    <collection property="updateOnlyTheseInstances"
                select="selectInstanceOverrides"
                column="id"
                foreignColumn="update_row_id" />
  </resultMap>

  <resultMap
      id="jobUpdateInstructionMap"
      type="org.apache.aurora.scheduler.storage.db.views.DbJobUpdateInstructions">
    <id column="id" />
    <association property="desiredState" resultMap="instanceConfigMap" columnPrefix="ditc_" />
    <association property="settings" resultMap="jobUpdateSettingsMap" columnPrefix="juse_"/>
    <collection property="initialState"
                select="selectInstanceConfigs"
                column="id"
                foreignColumn="update_row_id" />
  </resultMap>

  <resultMap id="jobUpdateMap" type="org.apache.aurora.scheduler.storage.db.views.DbJobUpdate">
    <id column="u_id" />
    <association property="summary" resultMap="jobUpdateSummaryMap" columnPrefix="jusm_"/>
    <association property="instructions" resultMap="jobUpdateInstructionMap" columnPrefix="jui_"/>
  </resultMap>

  <resultMap id="jobInstanceUpdateMap" type="org.apache.aurora.gen.JobInstanceUpdateEvent">
    <id column="id" />
    <result property="action"
            column="action"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateActionTypeHandler"/>
  </resultMap>

  <resultMap id="jobUpdateEventMap" type="org.apache.aurora.gen.JobUpdateEvent">
    <id column="id" />
    <result property="status"
            column="status"
            typeHandler="org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateStatusTypeHandler"/>
  </resultMap>

  <resultMap
      id="jobUpdateDetailsMap"
      type="org.apache.aurora.scheduler.storage.db.views.DbStoredJobUpdateDetails">
    <id column="u_id" />
    <association property="details.update" resultMap="jobUpdateMap" />
    <collection property="details.updateEvents"
                select="selectUpdateEvents"
                column="u_id"
                foreignColumn="update_row_id">
    </collection>
    <collection property="details.instanceEvents"
                select="selectInstanceEvents"
                column="u_id"
                foreignColumn="update_row_id">
    </collection>
  </resultMap>

  <sql id="status_inner_join">
    INNER JOIN
    (
      SELECT
        e_s.update_row_id,
        e_s.status
      FROM job_update_events AS e_s
      INNER JOIN
      (
        SELECT
          update_row_id,
          MAX(timestamp_ms) AS timestamp_ms
        FROM job_update_events
        GROUP BY update_row_id
      ) AS e_t ON e_t.update_row_id = e_s.update_row_id AND e_t.timestamp_ms = e_s.timestamp_ms
    ) AS max_status ON max_status.update_row_id = u.id
  </sql>

  <sql id="created_timestamp_inner_join">
    INNER JOIN
    (
      SELECT
        update_row_id,
        MIN(timestamp_ms) AS timestamp_ms
      FROM job_update_events
      GROUP BY update_row_id
    ) AS min_ts ON min_ts.update_row_id = u.id
  </sql>

  <sql id="last_updated_timestamp_inner_join">
    INNER JOIN
    (
      SELECT
        update_row_id,
        MAX(timestamp_ms) AS timestamp_ms
      FROM
      (
        SELECT
          update_row_id,
          timestamp_ms
        FROM job_update_events
        UNION ALL
        SELECT
          update_row_id,
          timestamp_ms
        FROM job_instance_update_events
      )
      GROUP BY update_row_id
    ) AS max_ts ON max_ts.update_row_id = u.id
  </sql>

  <sql id="timestamps_inner_joins">
    <include refid="status_inner_join" />
    <include refid="created_timestamp_inner_join" />
    <include refid="last_updated_timestamp_inner_join" />
  </sql>

  <sql id="query_filter">
    <if test="key != null || role != null || user != null || jobKey != null || updateStatuses != null || limit != 0 || offset != 0">
      WHERE TRUE
      <if test="key != null">
        AND <include refid="filter_by_update_key"/>
      </if>
      <if test="user != null">AND u.user = #{user}</if>
      <if test="role != null">AND j.role = #{role}</if>
      <if test="jobKey != null">
        AND j.role = #{jobKey.role}
        AND j.name = #{jobKey.name}
        AND j.environment = #{jobKey.environment}
      </if>
      <if test="updateStatuses != null and !updateStatuses.isEmpty()">
        AND (max_status.status IN
        <foreach item="element" collection="updateStatuses" open="(" separator="," close="))">
          #{element, typeHandler=org.apache.aurora.scheduler.storage.db.typehandlers.JobUpdateStatusTypeHandler}
        </foreach>
      </if>
    </if>
    ORDER BY max_ts.timestamp_ms DESC
    <if test="limit != 0">LIMIT #{limit}</if>
    <if test="offset != 0">OFFSET #{offset}</if>
  </sql>

  <select id="selectSummaries" resultMap="jobUpdateSummaryMap">
    SELECT
      u.update_id AS update_id,
      u.user AS user,
      max_status.status AS just_status,
      min_ts.timestamp_ms AS just_created_timestamp_ms,
      max_ts.timestamp_ms AS just_last_modified_timestamp_ms,
      j.id AS jk_id,
      j.role AS jk_role,
      j.environment AS jk_environment,
      j.name AS jk_name
    FROM job_updates AS u
    <include refid="job_key_inner_join" />
    <include refid="timestamps_inner_joins" />
    <include refid="query_filter" />
  </select>

  <!--Column naming convention below follows the thrift object hierarchy and columnPrefix
    attributes used in associations.
    For example: jusm_just_status maps to JobUpdateSummary/JobUpdateState/status field.-->
  <sql id="job_update_columns">
      u.id AS u_id,
      u.update_id AS jusm_update_id,
      u.user AS jusm_user,
      max_status.status AS jusm_just_status,
      min_ts.timestamp_ms AS jusm_just_created_timestamp_ms,
      max_ts.timestamp_ms AS jusm_just_last_modified_timestamp_ms,
      j.id AS jusm_jk_id,
      j.role AS jusm_jk_role,
      j.environment AS jusm_jk_environment,
      j.name AS jusm_jk_name,
      u.id AS jui_juse_id,
      u.update_group_size AS jui_juse_update_group_size,
      u.max_per_instance_failures AS jui_juse_max_per_instance_failures,
      u.max_failed_instances AS jui_juse_max_failed_instances,
      u.min_wait_in_instance_running_ms AS jui_juse_min_wait_in_instance_running_ms,
      u.rollback_on_failure AS jui_juse_rollback_on_failure,
      u.wait_for_batch_completion AS jui_juse_wait_for_batch_completion,
      u.block_if_no_pulses_after_ms AS jui_juse_block_if_no_pulses_after_ms,
      u.id AS jui_id,
      cn.id AS jui_ditc_id,
      cn.task_config_row_id AS jui_ditc_task_config_row_id,
      di.id AS jui_ditc_r_id,
      di.first AS jui_ditc_r_first,
      di.last AS jui_ditc_r_last
  </sql>

  <sql id="job_update_outer_joins">
    LEFT OUTER JOIN job_update_configs AS cn ON cn.update_row_id = u.id AND cn.is_new = TRUE
    LEFT OUTER JOIN job_updates_to_desired_instances AS di ON di.update_row_id = u.id
  </sql>

  <sql id="lock_outer_join">
    LEFT OUTER JOIN job_update_locks AS l on l.update_row_id = u.id
  </sql>

  <sql id="unscoped_details_select">
    SELECT
      <include refid="job_update_columns" />,
      l.lock_token AS lock_token
    FROM job_updates AS u
    <include refid="job_key_inner_join" />
    <include refid="timestamps_inner_joins" />
    <include refid="job_update_outer_joins" />
    <include refid="lock_outer_join" />
  </sql>

  <!--Ideally, update instruction columns could be derived from job_update_columns above but that
      hits against the limits of mybatis code reuse as specifying a common "jui_" column prefix
      in case of a standalone (no parent association) select appears to be impossible.-->
  <select id="selectInstructions" resultMap="jobUpdateInstructionMap">
    SELECT
      u.id AS juse_id,
      u.update_group_size AS juse_update_group_size,
      u.max_per_instance_failures AS juse_max_per_instance_failures,
      u.max_failed_instances AS juse_max_failed_instances,
      u.min_wait_in_instance_running_ms AS juse_min_wait_in_instance_running_ms,
      u.rollback_on_failure AS juse_rollback_on_failure,
      u.wait_for_batch_completion AS juse_wait_for_batch_completion,
      u.block_if_no_pulses_after_ms AS juse_block_if_no_pulses_after_ms,
      u.id AS id,
      cn.id AS ditc_id,
      cn.task_config_row_id AS ditc_task_config_row_id,
      di.id AS ditc_r_id,
      di.first AS ditc_r_first,
      di.last AS ditc_r_last
    FROM job_updates AS u
    <include refid="job_key_inner_join" />
    <include refid="job_update_outer_joins" />
    WHERE <include refid="filter_by_update_key"/>
  </select>

  <select id="selectUpdate" resultMap="jobUpdateMap">
    SELECT
      <include refid="job_update_columns" />
    FROM job_updates AS u
    <include refid="job_key_inner_join" />
    <include refid="timestamps_inner_joins" />
    <include refid="job_update_outer_joins" />
    WHERE <include refid="filter_by_update_key"/>
  </select>

  <select id="selectDetails" resultMap="jobUpdateDetailsMap">
    <include refid="unscoped_details_select"/>
    WHERE <include refid="filter_by_update_key"/>
  </select>

  <select id="selectDetailsList" resultMap="jobUpdateDetailsMap">
    <include refid="unscoped_details_select"/>
    <include refid="query_filter"/>
  </select>

  <select id="selectAllDetails" resultMap="jobUpdateDetailsMap">
    <include refid="unscoped_details_select"/>
  </select>

  <select id="selectLockToken" resultType="String">
    SELECT
      lock_token
    FROM job_update_locks AS l
    INNER JOIN job_updates u ON l.update_row_id = u.id
    <include refid="job_key_inner_join" />
    WHERE <include refid="filter_by_update_key"/>
  </select>

  <select id="selectInstanceConfigs" resultMap="instanceConfigMap">
    SELECT
      co.id,
      co.task_config_row_id AS task_config_row_id,
      ci.id AS r_id,
      ci.first AS r_first,
      ci.last AS r_last
    FROM job_update_configs as co
    INNER JOIN job_update_configs_to_instances AS ci ON ci.config_id = co.id
    WHERE co.update_row_id = #{id}
      AND co.is_new = FALSE
  </select>

  <select id="selectInstanceOverrides" resultMap="rangeMap">
    SELECT
      o.id,
      o.first,
      o.last
    FROM job_updates_to_instance_overrides as o
    WHERE update_row_id = #{id}
  </select>

  <select id="selectInstanceUpdateEvents" resultMap="jobInstanceUpdateMap">
    SELECT
      e.id,
      instance_id,
      timestamp_ms,
      action
    FROM job_instance_update_events as e
    INNER JOIN job_updates as u ON u.id = e.update_row_id
    <include refid="job_key_inner_join" />
    WHERE <include refid="filter_by_update_key"/>
      AND e.instance_id = #{instanceId}
    ORDER BY e.timestamp_ms
  </select>

  <select id="selectUpdateEvents" resultMap="jobUpdateEventMap">
    SELECT
      e.id,
      status,
      timestamp_ms,
      e.user,
      message
    FROM job_update_events as e
    WHERE update_row_id = #{id}
    ORDER BY e.timestamp_ms
  </select>

  <select id="selectInstanceEvents" resultMap="jobInstanceUpdateMap">
    SELECT
      e.id,
      instance_id,
      timestamp_ms,
      action
    FROM job_instance_update_events as e
    WHERE update_row_id = #{id}
    ORDER BY e.timestamp_ms
  </select>

  <delete id="truncate">
    DELETE FROM job_updates;
  </delete>

  <select id="selectJobKeysForPruning" resultType="long">
    SELECT DISTINCT
      u.job_key_id
    FROM job_updates as u
    <include refid="created_timestamp_inner_join" />
    <include refid="lock_outer_join" />
    WHERE l.id IS NULL
    GROUP BY u.job_key_id
    HAVING COUNT(u.job_key_id) > #{retainCount}
    UNION
    SELECT DISTINCT
      u.job_key_id
    FROM job_updates as u
    <include refid="created_timestamp_inner_join" />
    <include refid="lock_outer_join" />
    WHERE min_ts.timestamp_ms &lt; #{pruneThresholdMs} AND l.id IS NULL
  </select>

  <resultMap id="jobUpdateKeyMap" type="org.apache.aurora.gen.JobUpdateKey">
    <association property="job"
                 resultMap="org.apache.aurora.scheduler.storage.db.JobKeyMapper.jobKeyMap"
                 columnPrefix="jk_"/>
  </resultMap>

  <resultMap id="pruneVictimMap" type="org.apache.aurora.scheduler.storage.db.PruneVictim">
    <id column="row_id" property="rowId"/>
    <association property="update" resultMap="jobUpdateKeyMap" columnPrefix="u_" />
  </resultMap>

  <select id="selectPruneVictims" resultMap="pruneVictimMap">
    SELECT
      row_id,
      u_id,
      u_jk_role,
      u_jk_environment,
      u_jk_name
    FROM
    (
      SELECT
        u.id as row_id,
        u.update_id AS u_id,
        j.role AS u_jk_role,
        j.environment AS u_jk_environment,
        j.name AS u_jk_name
      FROM job_updates as u
      <include refid="job_key_inner_join" />
      <include refid="created_timestamp_inner_join" />
      <include refid="lock_outer_join" />
      WHERE u.job_key_id = #{keyId}
        AND l.id IS NULL
      ORDER BY min_ts.timestamp_ms DESC
      LIMIT NULL
      OFFSET #{retainCount}
    )
    UNION
    SELECT
      u.id,
      u.update_id AS u_id,
      j.role AS u_jk_role,
      j.environment AS u_jk_environment,
      j.name AS u_jk_name
    FROM job_updates as u
    <include refid="job_key_inner_join" />
    <include refid="created_timestamp_inner_join" />
    <include refid="lock_outer_join" />
    WHERE u.job_key_id = #{keyId}
      AND min_ts.timestamp_ms &lt;= #{pruneThresholdMs}
      AND l.id IS NULL
  </select>

  <delete id="deleteCompletedUpdates">
    DELETE FROM job_updates
    WHERE id IN
    <foreach item="element" collection="rowIds" open="(" separator="," close=")">
      #{element}
    </foreach>
  </delete>
</mapper>

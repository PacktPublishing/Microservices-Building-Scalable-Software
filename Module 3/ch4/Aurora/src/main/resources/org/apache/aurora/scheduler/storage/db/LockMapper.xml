<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.aurora.scheduler.storage.db.LockMapper">
  <insert id="insert">
    INSERT INTO locks (
      job_key_id,
      token,
      user,
      timestampMs,
      message
    ) VALUES (
      (
        SELECT ID
        FROM job_keys
        WHERE role = #{key.job.role}
          AND environment = #{key.job.environment}
          AND name = #{key.job.name}
      ),
      #{token},
      #{user},
      #{timestampMs},
      #{message}
    )
  </insert>

  <resultMap id="lockResultMap" type="org.apache.aurora.scheduler.storage.db.views.LockRow">
    <!--
      Normally you can have MyBatis auto-map these columns and/or use assocations, but
      in this case we need to work-around thrift union type issues and prevent MyBatis
      from trying to create new objects like it does with associations.
      Explicitly mapping each column to a single base property (lock, here) does just that.
    -->
    <result column="token" property="lock.token"/>
    <result column="user" property="lock.user"/>
    <result column="timestampMs" property="lock.timestampMs"/>
    <result column="message" property="lock.message"/>
    <result column="role" property="lock.key.job.role"/>
    <result column="environment" property="lock.key.job.environment"/>
    <result column="name" property="lock.key.job.name"/>
  </resultMap>

  <select id="selectAll" resultMap="lockResultMap">
    SELECT * FROM locks AS lock
    JOIN job_keys AS key ON job_key_id = key.id
  </select>
  <sql id="jobKeyScope">
    JOIN job_keys AS key ON key.role = #{job.role}
    AND key.environment = #{job.environment}
    AND key.name = #{job.name}
    AND key.id = job_key_id
  </sql>
  <select id="select" resultMap="lockResultMap">
    SELECT * FROM locks <include refid="jobKeyScope" />
  </select>
  <delete id="delete">
    DELETE FROM locks
    WHERE job_key_id
      IN (SELECT id
          FROM job_keys
          WHERE role = #{job.role}
            AND environment = #{job.environment}
            AND name = #{job.name})
  </delete>
  <delete id="truncate">
    DELETE FROM locks
  </delete>
</mapper>
